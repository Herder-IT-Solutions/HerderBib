ER-Model: Janne, Michael

Objektorientierung: Pablo

Die Daten werden, außerhalb der Datenbank, in 4 Klassen gespeichert.
Diese sind primär zur Zwischenspeicherung und objektorientierten Modulierung von Daten gedacht, die eigentliche Langzeitspeicherung erfolgt in der Datenbank. Für diese Zwischenspeicherung und Modellierung stehen die Klassen TStudent, TRental, TBook und TBooktype zur Verfügung. In der Datei DBConnection.pas befindet sich die Verwaltungsklasse für die Datenbank. 
Entity-Objekte (book, booktype, student, rental) werden referenziert (als Adresse im Speicher) übergeben, um Dateninkonsiszenzen auszuschließen. Wenn in der GUI ein Objekt gelöscht wird, wird es von der TDBConnection zerstört. Daraufhin können Eigenschaften des Objekts nicht mehr abgefragt werden.
Diese Klasse heißt "TDBConnection" und beinhaltet diverse Funktionen, die auf die Datenbank zugreifen indem sie Daten auslesen, löschen, oder einfügen. Im Konstruktor wird zuerst eine Verbindung zur Datenbank hergestellt. Auf diese wird durch die Funktionen zugegriffen solange wie das Objekt besteht. Daher sollte stets nur ein TDBConnection Objekt existieren um Komplikationen zu vermeiden, welche entstehen könnten wenn mehrere Datenbankverbindungen gleichzeitig bestehen.
Um häufig verwendete Variablen einfach/effizient ändern zu können werden in der Datei “DBConstants.pas” einige wichtige Konstanten definiert.
Der Vorteil in der Verwendung von Klassen zur Speicherung von Entitätsdaten im Vergleich zu simpleren Arrays liegt in der besseren objektorientierten Modellierbarkeit und Codeeffizienz, da beispielsweise bei der Funktion TDBConnection.getBookById einfach ein TBook-Objekt anstatt mehreren Strings zurückgegeben werden kann. Die Funktionen selbst sind im Code kommentiert um das Verständnis dieser zu garantieren.
Der folgende Code ist die komplette Deklaration der TDBConnection Klasse mit Kommentaren zu den einzelnen Funktionen:


type




 ArrayOfStudents = array of TStudent;


 ArrayOfRentals = array of TRental;


 ArrayOfBooks = array of TBook;


 ArrayOfBooktypes = array of TBooktype;







 { TForm1 }


 TDBConnection = class


 public


   /////////////////////////////////////////////////////////


   //             STUDENT                                 //


   /////////////////////////////////////////////////////////







   // Returns an array of all students


   // result: array of student objects


   function getStudents: ArrayOfStudents;







   // Returns an array of all students with given first name


   // parameter: first name pattern. "%" can be used as a placeholder


   // result: array of student objects


   function getStudentsByFirstNamePattern(firstName: string): ArrayOfStudents;







   // Returns an array of all students with given last name


   // parameter: last name pattern. "%" can be used as a placeholder


   // result: array of student objects


   function getStudentsByLastNamePattern(lastName: string): ArrayOfStudents;







   // Returns an array of all students with given class name


   // parameter: class name


   // result: array of student objects


   function getStudentsByClassName(classN: string): ArrayOfStudents;







   // Returns student object with given id


   // parameter: student id


   // result: student object


   function getStudentById(id: longint): TStudent;







   // Returns TStudent object with given birthdate


   // parameter: TDate object (birthdate)


   // result: TStudent object


   function getStudentsByBirthdate(birthdate: TDate): ArrayOfStudents;







   // Returns student object with given ldap username


   // parameter: student's ldap username. "%" can be used as a placeholder


   // result: student object


   function getStudentsByLDAPUserPattern(ldap_user: string): ArrayOfStudents;







   // updateInserts student object into database. Either updates an existing one or inserts a new one


   // parameter: student object


   // result: TRUE on success


   function updateInsertStudent(var student: TStudent): boolean;







   // Deletes a student and destroys the object


   // parameter: student object


   // result: TRUE on success


   function deleteStudent(var student: TStudent): boolean;












   /////////////////////////////////////////////////////////


   //             RENTAL                                  //


   /////////////////////////////////////////////////////////







   // Returns an array of all rentals


   // result: array of rental objects


   function getRentals: ArrayOfRentals;







   // Returns an array of all rentals with given student and book


   // parameter: student, book


   // result: array of rental objects


   function getAllRentalsByBookAndStudent(var student: TStudent;


     var book: TBook): ArrayOfRentals;







   // updateInserts rental object into database. Either updates an existing one or inserts a new one


   // parameter: rental object


   // result: TRUE on success


   function updateInsertRental(var rental: TRental): boolean;







   // Deletes a rental and destroys the object


   // parameter: rental object


   // result: TRUE on success


   function deleteRental(var rental: TRental): boolean;







   // Deletes all returned rentals older than a certain date


   // parameter: Date


   // result: Amount of deleted rentals on success, -1 on error


   function deleteReturnedRentalOlderThan(date: TDate): integer;







   /////////////////////////////////////////////////////////


   //             BOOK                                    //


   /////////////////////////////////////////////////////////







   // Returns an array of all books


   // result: array of book objects


   function getBooks: ArrayOfBooks;







   // Returns the book object by given book id or NIL if the book does not exist


   // parameter: book id


   // result: book object | nil


   function getBookById(id: longint): TBook;







   // updateInserts book object into database. Either updates an existing one or inserts a new one


   // parameter: book object


   // result: TRUE on success


   function updateInsertBook(var book: TBook): boolean;







   // Deletes a book and destroys the object


   // parameter: book object


   // result: TRUE on success


   function deleteBook(var book: TBook): boolean;







   /////////////////////////////////////////////////////////


   //             BOOKTYPE                                //


   /////////////////////////////////////////////////////////







   // Returns an array of all books


   // result: array of booktype objects


   function getBooktypes: ArrayOfBooktypes;







   // Returns the Booktype of an ISBN Number


   // parameter: Isbn (String type)


   // result: TBooktype on success, NIL on failure


   function getBooktypeByIsbn(isbn: string): TBooktype;







   // updateInserts booktype object into database. Either updates an existing one or inserts a new one


   // parameter: booktype object


   // result: TRUE on success


   function updateInsertBooktype(var booktype: TBooktype): boolean;







   // Deletes a booktype and destroys the object


   // parameter: booktype object


   // result: TRUE on success


   function deleteBooktype(var booktype: TBooktype): boolean;







   /////////////////////////////////////////////////////////







   // Returns the current Error Object


   // result: Error Object (DBError, Type: Exception)


   function getError: Exception;







   /////////////////////////////////////////////////////////







   // Opens database connection


   // parameter: file path to sqlite file


   constructor Create(databasePath: string);







   // Closes the database connection


   destructor Destroy;







   // Checks if conncetion to database was successful


   // result: TRUE on success


   function isConnected: boolean;







 private


   procedure setStudentFields(var resultVar: ArrayOfStudents; returnOne: boolean);


   procedure setRentalFields(var resultVar: ArrayOfRentals; returnOne: boolean);


   procedure setBookFields(var resultVar: ArrayOfBooks; returnOne: boolean);


   procedure setBooktypeFields(var resultVar: ArrayOfBooktypes; returnOne: boolean);







 private


   SQLite3Connection: TSQLite3Connection;


   SQLQuery: TSQLQuery;


   SQLTransaction: TSQLTransaction;


   DBError: Exception;


 end;

